pipeline {
    agent any
    stages {
        stage('Clean Clone') {
            steps {
                dir('workspace-clean') {
                    deleteDir() // Ensure a clean directory
                    checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/chaituvarma142/deployment_files_manifest.git']]])
                }
            }
        }

        stage('Build and Deploy Pipeline') {
            agent {
                docker {
                    image 'abhishekf5/maven-abhishek-docker-agent:v1'
                    args '--entrypoint "" --user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            stages {
                stage('Build and Push Docker Image') {
                    environment {
                        DOCKER_IMAGE = "docker.io/995290/ultimate-cicd:${BUILD_NUMBER}"
                    }
                    steps {
                        dir('workspace-clean') {
                            sh '''
                                cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                                docker build -t ${DOCKER_IMAGE} .
                                echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin
                                docker push ${DOCKER_IMAGE}
                            '''
                        }
                    }
                }

                stage('Update Deployment File') {
                    environment {
                        GIT_REPO_NAME = "deployment_files_manifest"
                        GIT_USER_NAME = "chaituvarma142"
                    }
                    steps {
                        dir('workspace-clean') {
                            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                                sh '''
                                    git config user.email "chaitanyavarma142@gmail.com"
                                    git config user.name "chaituvarma142"

                                    # Ensure we're on the latest remote main branch
                                    git reset --hard
                                    git clean -fd
                                    git pull origin main --rebase

                                    # Update deployment file
                                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                    git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit."
                                    
                                    # Force push updates to the remote repository
                                    git push --force-with-lease https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:refs/heads/main
                                '''
                            }
                        }
                    }
                }
            }
        }
    }
}
